// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ChatT string

const (
	ChatTPrivate ChatT = "private"
	ChatTGroup   ChatT = "group"
	ChatTChannel ChatT = "channel"
)

func (e *ChatT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatT(s)
	case string:
		*e = ChatT(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatT: %T", src)
	}
	return nil
}

type NullChatT struct {
	ChatT ChatT
	Valid bool // Valid is true if ChatT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatT) Scan(value interface{}) error {
	if value == nil {
		ns.ChatT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ChatT, nil
}

func (e ChatT) Valid() bool {
	switch e {
	case ChatTPrivate,
		ChatTGroup,
		ChatTChannel:
		return true
	}
	return false
}

func AllChatTValues() []ChatT {
	return []ChatT{
		ChatTPrivate,
		ChatTGroup,
		ChatTChannel,
	}
}

type Chat struct {
	ID       int32 `db:"id" json:"id"`
	ChatType ChatT `db:"chat_type" json:"chat_type"`
}

type ChatUser struct {
	ChatID int32 `db:"chat_id" json:"chat_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

type Message struct {
	ID        int32     `db:"id" json:"id"`
	ChatID    int32     `db:"chat_id" json:"chat_id"`
	SenderID  int32     `db:"sender_id" json:"sender_id"`
	Content   string    `db:"content" json:"content"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type Session struct {
	ID        uuid.UUID    `db:"id" json:"id"`
	UserID    int32        `db:"user_id" json:"user_id"`
	ExpiresAt time.Time    `db:"expires_at" json:"expires_at"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
}

type User struct {
	ID        int32        `db:"id" json:"id"`
	FirstName string       `db:"first_name" json:"first_name"`
	LastName  string       `db:"last_name" json:"last_name"`
	Phone     string       `db:"phone" json:"phone"`
	Email     string       `db:"email" json:"email"`
	Password  string       `db:"password" json:"password"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}
