// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, password, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchUserByEmail = `-- name: SearchUserByEmail :many
SELECT id, first_name, last_name, email, password, created_at, updated_at
FROM users
WHERE email LIKE $1
`

func (q *Queries) SearchUserByEmail(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUserByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeUser = `-- name: StoreUser :exec
INSERT INTO users (first_name, last_name, email, password)
VALUES ($1, $2, $3, $4)
`

type StoreUserParams struct {
	FirstName string `db:"first_name" json:"first_name"`
	LastName  string `db:"last_name" json:"last_name"`
	Email     string `db:"email" json:"email"`
	Password  string `db:"password" json:"password"`
}

func (q *Queries) StoreUser(ctx context.Context, arg StoreUserParams) error {
	_, err := q.db.ExecContext(ctx, storeUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	return err
}
