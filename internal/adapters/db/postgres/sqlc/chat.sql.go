// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: chat.sql

package sqlc

import (
	"context"
)

const addChatMember = `-- name: AddChatMember :exec
INSERT INTO chat_users(chat_id, user_id)
VALUES ($1, $2)
`

type AddChatMemberParams struct {
	ChatID int64 `db:"chat_id" json:"chat_id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) AddChatMember(ctx context.Context, db DBTX, arg AddChatMemberParams) error {
	_, err := db.ExecContext(ctx, addChatMember, arg.ChatID, arg.UserID)
	return err
}

const createChat = `-- name: CreateChat :one
INSERT INTO chat(chat_type)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateChat(ctx context.Context, db DBTX, chatType ChatT) (int64, error) {
	row := db.QueryRowContext(ctx, createChat, chatType)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getChatMembers = `-- name: GetChatMembers :many
SELECT cu.user_id
FROM "chat_users" cu
WHERE cu.chat_id = $1
`

func (q *Queries) GetChatMembers(ctx context.Context, db DBTX, chatID int64) ([]int64, error) {
	rows, err := db.QueryContext(ctx, getChatMembers, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var user_id int64
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, chat_id, sender_id, content, created_at
FROM "messages" m
WHERE m.chat_id = $1
ORDER BY m.created_at DESC
`

func (q *Queries) GetChatMessages(ctx context.Context, db DBTX, chatID int64) ([]Message, error) {
	rows, err := db.QueryContext(ctx, getChatMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatUserRow = `-- name: GetChatUserRow :one
SELECT chat_id, user_id
FROM chat_users cu
WHERE cu.chat_id = $1
  AND cu.user_id = $2
LIMIT 1
`

type GetChatUserRowParams struct {
	ChatID int64 `db:"chat_id" json:"chat_id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) GetChatUserRow(ctx context.Context, db DBTX, arg GetChatUserRowParams) (ChatUser, error) {
	row := db.QueryRowContext(ctx, getChatUserRow, arg.ChatID, arg.UserID)
	var i ChatUser
	err := row.Scan(&i.ChatID, &i.UserID)
	return i, err
}

const getUserChatMetadata = `-- name: GetUserChatMetadata :many
SELECT ch.id,
       u.first_name,
       u.last_name,
       COALESCE((SELECT m.content FROM "messages" m WHERE m.id = ch.id ORDER BY m.created_at DESC LIMIT 1),
                '')::varchar AS last_message
FROM "users" u
       JOIN "chat_users" cu ON u.ID = cu.user_id
       JOIN "chat" ch ON ch.id = cu.chat_id
WHERE u.id = $1
`

type GetUserChatMetadataRow struct {
	ID          int64  `db:"id" json:"id"`
	FirstName   string `db:"first_name" json:"first_name"`
	LastName    string `db:"last_name" json:"last_name"`
	LastMessage string `db:"last_message" json:"last_message"`
}

func (q *Queries) GetUserChatMetadata(ctx context.Context, db DBTX, id int64) ([]GetUserChatMetadataRow, error) {
	rows, err := db.QueryContext(ctx, getUserChatMetadata, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserChatMetadataRow{}
	for rows.Next() {
		var i GetUserChatMetadataRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.LastMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
